{"version":3,"file":"static/js/923.0c3f58d4.chunk.js","mappings":"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","sources":["components/LazyImg.jsx","components/Card.jsx","components/CircleRating.jsx","components/Genres.jsx","components/Loading.jsx","constants/api.constants.js","hooks/useFetchData.js","components/DropDown.jsx","pages/explore/Explore.jsx","utils/api.js"],"sourcesContent":["import React from \"react\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\nfunction LazyImg({ src, className }) {\r\n  return (\r\n    <LazyLoadImage\r\n      className={className || \"\"}\r\n      alt=\"\"\r\n      effect=\"blur\"\r\n      src={`https://image.tmdb.org/t/p/w780${src}`}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LazyImg;\r\n","import React from \"react\";\r\nimport LazyImg from \"./LazyImg\"; // Make sure to import LazyImg or any image component you have\r\nimport CircleRating from \"./CircleRating\"; // Import CircleRating component\r\nimport Genres from \"./Genres\"; // Import Genres component\r\nimport dayjs from \"dayjs\"; // Import dayjs for date formatting\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n// import PosterFallback from \"/assets/no-poster.png\";\r\n\r\nfunction Card({mediaTypes, data }) {\r\n  const PosterFallback = '../assets/no-poster.png';\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const mediaType = location.pathname.split(\"/\").filter(Boolean)[0];\r\n// console.log(data?.media_type , mediaType)\r\n  return (\r\n    <div  onClick={() =>\r\n      navigate(`/${data?.media_type || mediaTypes }/${data.id}`)\r\n  } \r\n   className=\"relative border-1 aspect-w-2 aspect-h-3 text-white cursor-pointer overflow-hidden group\">\r\n     { data?.poster_path ? <LazyImg\r\n        src={data?.poster_path}\r\n        className=\"w-full h-[full] sm:h-[full] md:h-[400px] xl:h-[450px] transform transition duration-200\"\r\n      /> : <img src={PosterFallback} alt=\"\"/> }\r\n      <div className=\"group-hover:flex bottom-0 absolute flex flex-col justify-end items-start gap-2 bg-black bg-opacity-70 p-2 pb-5 w-full h-full transform transition-all translate-y-full group-hover:translate-y-0 duration-500 delay-100 ease-in-out\">\r\n        <div className=\"font-bold text-lg\">{data?.title || data?.name}</div>\r\n        <p className=\"text-sm\">{data?.overview?.slice(0, 100)}...</p>\r\n        <span className=\"font-bold text-sm\">\r\n          <strong className=\"font-semibold text-white\">Aired :</strong>{\" \"}\r\n          <span className=\"underline underline-offset-2\">\r\n            {\" \"}\r\n            {dayjs(data?.release_date || data?.first_air_date).format(\r\n              \"MMM D, YYYY\"\r\n            )}\r\n          </span>\r\n        </span>\r\n        <CircleRating rating={data?.vote_average?.toFixed(1)} />\r\n        <Genres data={data?.genre_ids?.slice(0, 2)} type={data?.media_type} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=popularity.desc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=popularity.asc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=vote_average.desc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=vote_average.asc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=primary_release_date.desc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=primary_release_date.asc\r\n// https://api.themoviedb.org/3/discover/movie?with_genres=12&sort_by=original_title.asc","import React from 'react'\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nfunction CircleRating({rating,text,width}) {\r\n  return (\r\n    <div className={`bg-netflixWhite  p-[1px] rounded-full w-12 ${width} circleRating`}>\r\n    <CircularProgressbar\r\n        value={rating}\r\n        maxValue={10}\r\n        text={rating}\r\n       \r\n        className=\"font-bold text-2xl\"\r\n        styles={buildStyles({\r\n            pathColor:\r\n                rating < 5 ? \"red\" : rating < 7 ? \"orange\" : \"green\",\r\n                textColor: '#E50914',\r\n                textSize: text,\r\n                \r\n        })}\r\n    />\r\n</div>\r\n  )\r\n}\r\n\r\nexport default CircleRating","import React from 'react'\r\nimport { MOVIE_GENRES, TV_GENRES } from '../constants/api.constants';\r\n\r\nfunction Genres({data,type}) {\r\n    //console.log('data',data)\r\n    const genres = type === \"movie\" ? MOVIE_GENRES : TV_GENRES;\r\n\r\n    return (\r\n        <div className=\"flex justify-center items-center gap-2 genres\">\r\n        {data?.map((g) => {\r\n            const genre = genres.find(genre => genre.id === g);\r\n            if (!genre) return null;\r\n            return (\r\n                <div key={g} className=\"bg-netflixRed p-1 font-semibold text-white text-xs genre\">\r\n                    {genre.name}\r\n                </div>\r\n            );\r\n        })}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Genres","import React from \"react\";\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className=\"items-center gap-4 space-y-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 pb-10 main-container\">\r\n      {Array.from({ length: 4 }).map((_, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n        >\r\n          <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","export const API_KEY = 'b08b3db0727428549f0e771a528c714c'; // Replace with your API key\r\nexport const ACCESS_TOKEN = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMDhiM2RiMDcyNzQyODU0OWYwZTc3MWE1MjhjNzE0YyIsInN1YiI6IjY2M2U1NTZjNTY2MTI4MGQ3ZGZiMzdmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.f3wD2arnCMw_AWGKpD6xvXOPA-kFI9h3pCNuPCrQj78'; // Replace with your access token\r\n\r\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';\r\nexport const IMG_BASE_URL = 'https://image.tmdb.org/t/p';\r\nexport const IMG_ORIGINAL_SIZE = 'https://image.tmdb.org/t/p/w1280';\r\n\r\nexport const LANGUAGE = 'en-US';\r\nexport const LANGUAGE_JAPAN = 'ja';\r\n\r\nexport const DEFAULT_PARAMS = {\r\n  include_adult: 'false',\r\n  include_video: 'true',\r\n  language: LANGUAGE,\r\n  sort_by: 'popularity.desc',\r\n  page: '1'\r\n};\r\n\r\n// Movie endpoints\r\nexport const MOVIE_ENDPOINTS = {\r\n  NORMAL:'movie',\r\n  TOP_RATED: 'movie/top_rated',\r\n  POPULAR: 'movie/popular',\r\n  UPCOMING: 'movie/upcoming',\r\n  NOW_PLAYING: 'movie/now_playing',\r\n};\r\n\r\n// TV endpoints\r\nexport const TV_ENDPOINTS = {\r\n  NORMAL:'tv',\r\n  TRENDING: 'trending/tv/week',\r\n  TOP_RATED: 'tv/top_rated',\r\n  COMEDY: 'discover/tv',\r\n  NOW_PLAYING: 'tv/on_the_air',\r\n};\r\n\r\n// Anime endpoints\r\nexport const ANIME_ENDPOINTS = {\r\n  NORMAL:'tv',\r\n  RECENT_RELEASED: 'discover/tv',\r\n  POPULAR_WEEK: 'discover/tv',\r\n  ALL_TIME_FAVORITE: 'discover/tv',\r\n};\r\n\r\n// Search endpoint\r\nexport const SEARCH_ENDPOINT = 'search/multi';\r\n\r\n// ID GENRES Category\r\n\r\n\r\nexport const MOVIE_GENRES = [\r\n    {id:null,name:'Default'},\r\n    { id: 28, name: 'Action' },\r\n    { id: 12, name: 'Adventure' },\r\n    { id: 16, name: 'Animation' },\r\n    { id: 35, name: 'Comedy' },\r\n    { id: 80, name: 'Crime' },\r\n    { id: 99, name: 'Documentary' },\r\n    { id: 18, name: 'Drama' },\r\n    { id: 10751, name: 'Family' },\r\n    { id: 14, name: 'Fantasy' },\r\n    { id: 36, name: 'History' },\r\n    { id: 27, name: 'Horror' },\r\n    { id: 10402, name: 'Music' },\r\n    { id: 9648, name: 'Mystery' },\r\n    { id: 10749, name: 'Romance' },\r\n    { id: 878, name: 'Science Fiction' },\r\n    { id: 10770, name: 'TV Movie' },\r\n    { id: 53, name: 'Thriller' },\r\n    { id: 10752, name: 'War' },\r\n    { id: 37, name: 'Western' }\r\n  ];\r\n\r\n  export const TV_GENRES = [\r\n    {id:null,name:'Default'},\r\n    { id: 10759, name: 'Action & Adventure' },\r\n    { id: 16, name: 'Animation' },\r\n    { id: 35, name: 'Comedy' },\r\n    { id: 80, name: 'Crime' },\r\n    { id: 99, name: 'Documentary' },\r\n    { id: 18, name: 'Drama' },\r\n    { id: 10751, name: 'Family' },\r\n    { id: 10762, name: 'Kids' },\r\n    { id: 9648, name: 'Mystery' },\r\n    { id: 10763, name: 'News' },\r\n    { id: 10764, name: 'Reality' },\r\n    { id: 10765, name: 'Sci-Fi & Fantasy' },\r\n    { id: 10766, name: 'Soap' },\r\n    { id: 10767, name: 'Talk' },\r\n    { id: 10768, name: 'War & Politics' },\r\n    { id: 37, name: 'Western' }\r\n  ];\r\n\r\n  export const SORT_BY_DATA = [\r\n    {value:'Default',label:'Default'},\r\n\r\n    { value: \"popularity.desc\", label: \"Popularity Descending\" },\r\n    { value: \"popularity.asc\", label: \"Popularity Ascending\" },\r\n    { value: \"vote_average.desc\", label: \"Rating Descending\" },\r\n    { value: \"vote_average.asc\", label: \"Rating Ascending\" },\r\n    {\r\n        value: \"primary_release_date.desc\",\r\n        label: \"Release Date Descending\",\r\n    },\r\n    { value: \"primary_release_date.asc\", label: \"Release Date Ascending\" },\r\n    { value: \"original_title.asc\", label: \"Title (A-Z)\" },\r\n];\r\n\r\n\r\n// Image Sizes\r\nexport const IMAGE_SIZES = {\r\n    BACKDROP: ['w300', 'w780', 'w1280', 'original'],\r\n    LOGO: ['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original'],\r\n    POSTER: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\r\n    PROFILE: ['w45', 'w185', 'h632', 'original'],\r\n    STILL: ['w92', 'w185', 'w300', 'original']\r\n  };\r\n","\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { fetchDataFromApi } from '../utils/api';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await fetchDataFromApi(url);\r\n      // console.log(result)\r\n      setData(result);\r\n    } catch (error) {\r\n      setError('Something went wrong!');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  return { data, loading, error };\r\n};\r\n\r\nexport default useFetch;\r\n","import React, { useEffect, useState } from 'react'\r\nimport Select from \"react-select\";\r\n\r\n\r\nconst netflixColors = {\r\n    red: '#E50914',\r\n    black: '#000000',\r\n    white: '#FFFFFF',\r\n    background: '#141414',\r\n    background2: '#1C1C1C',\r\n  };\r\n  \r\n  const customStyles = {\r\n    container: (provided) => ({\r\n      ...provided,\r\n      margin: \"10px 0\",\r\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n      \r\n    }),\r\n    control: (provided, state) => ({\r\n      ...provided,\r\n      width: \"300px\",\r\n      backgroundColor: netflixColors.background,\r\n      borderColor: state.isFocused ? netflixColors.black : netflixColors.red,\r\n      boxShadow: state.isFocused ? `0 0 0 1px ${netflixColors.red}` : \"none\",\r\n      \"&:hover\": {\r\n        borderColor: state.isFocused ? netflixColors.black : netflixColors.red,\r\n      },\r\n      padding: \"5px\",\r\n      color: netflixColors.white,\r\n      fontWeight: \"bold\", // Font weight bold\r\n    cursor: \"pointer\", // Cursor pointer\r\n      \r\n    }),\r\n    valueContainer: (provided) => ({\r\n      ...provided,\r\n      padding: \"0 6px\",\r\n      color: netflixColors.white,\r\n    }),\r\n    singleValue: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n    }),\r\n    placeholder: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n    }),\r\n    dropdownIndicator: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n      \"&:hover\": {\r\n        color: netflixColors.red,\r\n      },\r\n    }),\r\n    indicatorSeparator: (provided) => ({\r\n      ...provided,\r\n      backgroundColor: netflixColors.red,\r\n    }),\r\n    menu: (provided) => ({\r\n      ...provided,\r\n      backgroundColor: netflixColors.background2,\r\n      borderRadius: \"4px\",\r\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\r\n      zIndex: 10,\r\n    }),\r\n    menuList: (provided) => ({\r\n      ...provided,\r\n      padding: \"0\",\r\n      backgroundColor: netflixColors.background2,\r\n    }),\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      backgroundColor: state.isSelected\r\n        ? netflixColors.red\r\n        : state.isFocused\r\n        ? netflixColors.background\r\n        : netflixColors.background2,\r\n      color: state.isSelected ? netflixColors.white : netflixColors.white,\r\n      padding: \"10px 20px\",\r\n      \"&:active\": {\r\n        backgroundColor: netflixColors.red,\r\n        color: netflixColors.white,\r\n        cursor: \"pointer\",\r\n      },\r\n    }),\r\n  };\r\n  \r\nfunction DropDown({options,placeholder,onChange ,mediaType}) {\r\n\r\n  \r\n  return (\r\n    <Select \r\n    options={options} \r\n    styles={customStyles}\r\n    placeholder={placeholder}\r\n    onChange={onChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DropDown","// import React, { useEffect, useState } from \"react\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport Container from \"../../components/Container\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport DropDown from \"../../components/DropDown\";\r\nimport {\r\n  MOVIE_GENRES,\r\n  SORT_BY_DATA,\r\n  TV_GENRES,\r\n} from \"../../constants/api.constants\";\r\nimport useFetch from \"../../hooks/useFetchData\";\r\nimport Card from \"../../components/Card\";\r\nimport { fetchDataFromApi } from \"../../utils/api\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Loading from \"../../components/Loading\";\r\n\r\nconst Explore = () => {\r\n  const location = useLocation();\r\n  const mediaType = location.pathname.split(\"/\").filter(Boolean)[1];\r\n  \r\n  const [data, setData] = useState(null);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sortBy, setSortBy] = useState(SORT_BY_DATA[0].value);\r\n  const [selectedGenre, setSelectedGenre] = useState(null);\r\n  const [key, setKey] = useState(mediaType); // Use mediaType as key for DropDown\r\n\r\n  const { data: genresData } = useFetch(`/genre/${mediaType}/list`);\r\n\r\n  \r\n  const fetchInitialData = useCallback(() => {\r\n    setLoading(true);\r\n    fetchDataFromApi(`/discover/${mediaType}`).then(\r\n      (res) => {\r\n        setData(res);\r\n        // console.log(pageNum)\r\n        setPageNum(2);\r\n        setLoading(false);\r\n      }\r\n    );\r\n  }, [mediaType]);\r\n\r\n  const fetchGenreData = useCallback(\r\n    (genreId) => {\r\n      setLoading(true);\r\n      fetchDataFromApi(`/discover/${mediaType}`, {\r\n        with_genres: genreId,\r\n        sort_by: sortBy,\r\n      }).then((res) => {\r\n        // console.log(res)\r\n        setData(res);\r\n        setPageNum(2);\r\n        setLoading(false);\r\n      });\r\n    },\r\n\r\n    [sortBy,selectedGenre]\r\n  );\r\n\r\n  const fetchNextPageData = useCallback(() => {\r\n    const params = {\r\n      page: pageNum,\r\n      sort_by: sortBy,\r\n      with_genres: selectedGenre\r\n    };\r\n\r\n    fetchDataFromApi(`/discover/${mediaType}`, params).then((res) => {\r\n      setData((prevData) => ({\r\n        ...prevData,\r\n        results: [...(prevData?.results || []), ...res.results],\r\n      }));\r\n      setPageNum((prev) => prev + 1);\r\n    });\r\n  }, [pageNum]);\r\n\r\n    // Reset sortBy and selectedGenre when mediaType changes\r\n    useEffect(() => {\r\n      setSortBy(SORT_BY_DATA[0].value);\r\n      setSelectedGenre(null);\r\n      setPageNum(1);\r\n      setKey(mediaType); \r\n      fetchInitialData();\r\n    }, [mediaType]);\r\n\r\n    \r\n  useEffect(() => {\r\n    if (selectedGenre) {\r\n      fetchGenreData(selectedGenre);\r\n    }else if(sortBy){\r\n      fetchGenreData(selectedGenre);\r\n    } \r\n    else {\r\n      fetchInitialData();\r\n    }\r\n  }, [sortBy, selectedGenre]);\r\n\r\n  const convertGenresToOptions = (genres) =>\r\n    genres?.map((genre) => ({\r\n      value: genre.id,\r\n      label: genre.name,\r\n    })) || [];\r\n\r\n  const handleGenreChange = (selectedOption) => {\r\n    // console.log(selectedOption.value)\r\n    setSelectedGenre(selectedOption.value);\r\n  }\r\n  const handleSortChange = (selectedOption) =>{\r\n    // console.log(selectedOption.value)\r\n    setSortBy(selectedOption.value);}\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <div className=\"flex justify-center items-center my-2 w-full\">\r\n        <img\r\n          className=\"w-28\"\r\n          src=\"https://media3.giphy.com/media/FgH5xSNjGHZsiYPWAX/giphy.gif?cid=6c09b9523ta5vy9bxchut3l4buumvpzbmx5ht06hcn6s2rz9&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <section\r\n      className={`bg-netflixbackground pt-28 w-screen text-netflixWhite ${\r\n        data ? \"h-full\" : \"h-screen\"\r\n      }`}\r\n    >\r\n      <Container>\r\n        <div className=\"flex flex-wrap justify-between items-center mb-2 page-heading\">\r\n          <div className=\"page-title\">\r\n            <h3 className=\"font-bold text-2xl\">\r\n              {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n            </h3>\r\n          </div>\r\n          <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n            <DropDown\r\n            key={key}\r\n              options={\r\n                mediaType === \"tv\"\r\n                  ? convertGenresToOptions(TV_GENRES)\r\n                  : convertGenresToOptions(MOVIE_GENRES)\r\n              }\r\n              onChange={handleGenreChange}\r\n              placeholder=\"Categories\"\r\n              mediaType={mediaType}\r\n            />\r\n            <DropDown\r\n            key={mediaType}\r\n              options={SORT_BY_DATA}\r\n              placeholder=\"Sort By\"\r\n              onChange={handleSortChange}\r\n              mediaType={mediaType}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {loading && <Loading />}\r\n\r\n        {!loading && (\r\n          <>\r\n            {data?.results?.length > 0 ? (\r\n              <InfiniteScroll\r\n                className=\"content\"\r\n                dataLength={data?.results?.length}\r\n                next={fetchNextPageData}\r\n                hasMore={pageNum <= data?.total_pages}\r\n                loader={<Loading />}\r\n              >\r\n                <div className=\"items-start gap-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 pb-10 main-container\">\r\n                  {data.results.map(\r\n                    (item) =>\r\n                      item.media_type !== \"person\" && (\r\n                        <Card key={item.id} data={item} mediaTypes={mediaType} />\r\n                      )\r\n                  )}\r\n                </div>\r\n              </InfiniteScroll>\r\n            ) : (\r\n              <span className=\"resultNotFound\">Sorry, Results not found!</span>\r\n            )}\r\n          </>\r\n        )}\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Explore;\r\n\r\n// import Container from \"../../components/Container\";\r\n// import { useLocation, useParams } from \"react-router-dom\";\r\n// import DropDown from \"../../components/DropDown\";\r\n// import {\r\n//   MOVIE_GENRES,\r\n//   SORT_BY_DATA,\r\n//   TV_GENRES,\r\n// } from \"../../constants/api.constants\";\r\n// import useFetch from \"../../hooks/useFetchData\";\r\n// import Card from \"../../components/Card\";\r\n// import { fetchDataFromApi } from \"../../utils/api\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n// import Loading from \"../../components/Loading\";\r\n\r\n// function Explore() {\r\n//   const location = useLocation();\r\n//   const pathSegments = location.pathname.split(\"/\").filter(Boolean);\r\n//   const mediaType = pathSegments[1];\r\n//   const [data, setData] = useState(null);\r\n//   const [pageNum, setPageNum] = useState(1);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [genre, setGenre] = useState(null);\r\n//   const [sortby, setSortby] = useState(null);\r\n//   const genresUrl = `/genre/${mediaType}/list`;\r\n//   const exploreUrl = `/discover/${mediaType}`;\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortBy, setSortBy] = useState(SORT_BY_DATA[0].value);\r\n\r\n//   const { data: genresData } = useFetch(`/genre/${mediaType}/list`);\r\n//   const [selectedGenre, setSelectedGenre] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetchInitialData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedGenre) {\r\n//       fetchGenreData(selectedGenre.value);\r\n//     } else {\r\n//       fetchInitialData();\r\n//     }\r\n//     console.log(mediaType)\r\n//   }, [sortBy, selectedGenre,mediaType]);\r\n\r\n//   const fetchInitialData = () => {\r\n//     setLoading(true);\r\n//     fetchDataFromApi(`/discover/${mediaType}`, { sort_by: sortBy }).then((res) => {\r\n//       setData(res);\r\n//       setPageNum((prev) => prev + 1);\r\n//       setLoading(false);\r\n//     });\r\n//   };\r\n\r\n//   // const fetchNextPageData = () => {\r\n//   //   fetchDataFromApi(`/discover/${mediaType}?page=${pageNum}`, filters).then(\r\n//   //     (res) => {\r\n//   //       if (data?.results) {\r\n//   //         setData({\r\n//   //           ...data,\r\n//   //           results: [...data?.results, ...res.results],\r\n//   //         });\r\n//   //       } else {\r\n//   //         setData(res);\r\n//   //       }\r\n//   //       setPageNum((prev) => prev + 1);\r\n//   //     }\r\n//   //   );\r\n//   // };\r\n\r\n//   const fetchGenreData = (genreId) => {\r\n//     setLoading(true);\r\n//     fetchDataFromApi(`/discover/${mediaType}`, { with_genres: genreId, sort_by: sortBy }).then((res) => {\r\n//       setData(res);\r\n//       setPageNum(2); // Since we fetched page 1 already\r\n//       setLoading(false);\r\n//     });\r\n//   };\r\n\r\n//   const fetchNextPageData = () => {\r\n//     const params = selectedGenre\r\n//       ? { with_genres: selectedGenre.value, page: pageNum, sort_by: sortBy }\r\n//       : { page: pageNum, sort_by: sortBy };\r\n\r\n//     if (selectedGenre) {\r\n//       fetchDataFromApi(`/discover/${mediaType}`, params).then(\r\n//         (res) => {\r\n//           if (data?.results) {\r\n//             setData({\r\n//               ...data,\r\n//               results: [...data?.results, ...res.results],\r\n//             });\r\n//           } else {\r\n//             setData(res);\r\n//           }\r\n//           setPageNum((prev) => prev + 1);\r\n//         }\r\n//       );\r\n//     } else {\r\n//       fetchDataFromApi(`/discover/${mediaType}?page=${pageNum}`).then(\r\n//         (res) => {\r\n//           if (data?.results) {\r\n//             setData({\r\n//               ...data,\r\n//               results: [...data?.results, ...res.results],\r\n//             });\r\n//           } else {\r\n//             setData(res);\r\n//           }\r\n//           setPageNum((prev) => prev + 1);\r\n//         }\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   // useEffect(() => {\r\n//   //   filters = {};\r\n//   //   setData(null);\r\n//   //   setPageNum(1);\r\n//   //   setSortby(null);\r\n//   //   setGenre(null);\r\n//   //   fetchInitialData();\r\n//   // }, [mediaType]);\r\n\r\n//   const convertGenresToOptions = (genres) => {\r\n//     return genres.map((genre) => ({\r\n//       value: genre.id,\r\n//       label: genre.name,\r\n//     }));\r\n//   };\r\n//   const handleGenreChange = (selectedOption) => {\r\n//     setSelectedGenre(selectedOption);\r\n//   };\r\n\r\n//   const handleSortChange = (selectedOption) => {\r\n//     setSortBy(selectedOption.value);\r\n//   };\r\n//   const renderData = () => data?.results?.map((item) => <Card data={item} />);\r\n//   const renderSkeletons = () =>\r\n//     Array.from({ length: 20 }).map((_, index) => (\r\n//       <div\r\n//         key={index}\r\n//         className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n//       >\r\n//         <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n//       </div>\r\n//     ));\r\n\r\n//   return (\r\n//     <section\r\n//       className={`${\r\n//         data ? \"h-full\" : \"h-screen\"\r\n//       } bg-netflixbackground pt-28 w-screen  text-netflixWhite`}\r\n//     >\r\n//       <Container>\r\n//         <div className=\"flex flex-wrap justify-between items-center mb-2 page-heading\">\r\n//           <div className=\"page-title\">\r\n//             <h3 className=\"font-bold text-2xl\">\r\n//               {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n//             </h3>\r\n//           </div>\r\n//           <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n//             <DropDown\r\n//               options={\r\n//                 mediaType === \"tv\"\r\n//                   ? convertGenresToOptions(TV_GENRES)\r\n//                   : convertGenresToOptions(MOVIE_GENRES)\r\n//               }\r\n//               onChange={handleGenreChange}\r\n//               placeholder=\"Categories\"\r\n//             />\r\n//             <DropDown options={SORT_BY_DATA} placeholder=\"Sort By\" onChange={handleSortChange}/>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {loading && <Loading />}\r\n\r\n//         {!loading && (\r\n//           <>\r\n//             {data?.results?.length > 0 ? (\r\n//               <InfiniteScroll\r\n//                 className=\"content\"\r\n//                 dataLength={data?.results?.length || []}\r\n//                 next={fetchNextPageData}\r\n//                 hasMore={pageNum <= data?.total_pages}\r\n//                 loader={\r\n//                   <div className=\"flex justify-center items-center my-2 w-full\">\r\n//                     <img\r\n//                       className=\"w-28\"\r\n//                       src=\"https://media3.giphy.com/media/FgH5xSNjGHZsiYPWAX/giphy.gif?cid=6c09b9523ta5vy9bxchut3l4buumvpzbmx5ht06hcn6s2rz9&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s\"\r\n//                       alt=\"\"\r\n//                     />\r\n//                   </div>\r\n//                   // <Loading/>\r\n//                 }\r\n//               >\r\n//                 <div className=\"items-start gap-4 grid grid-cols-4 pb-10 main-container\">\r\n//                   {data?.results?.map((item, index) => {\r\n//                     if (item.media_type === \"person\") return;\r\n//                     return <Card key={item.id} data={item} />;\r\n//                   })}\r\n//                 </div>\r\n//               </InfiniteScroll>\r\n//             ) : (\r\n//               <span className=\"resultNotFound\">Sorry, Results not found!</span>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//         {/* {loading || !data || data.length === 0\r\n//             ? renderSkeletons()\r\n//             : renderData()} */}\r\n//       </Container>\r\n//     </section>\r\n//   );\r\n// }\r\n\r\n// export default Explore;\r\n// =============================================================================\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport Container from \"../../components/Container\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport DropDown from \"../../components/DropDown\";\r\nimport {\r\n  MOVIE_GENRES,\r\n  SORT_BY_DATA,\r\n  TV_GENRES,\r\n} from \"../../constants/api.constants\";\r\nimport useFetch from \"../../hooks/useFetchData\";\r\nimport Card from \"../../components/Card\";\r\n\r\nlet filters = {};\r\n\r\nfunction Explore() {\r\n  const location = useLocation();\r\n  const pathSegments = location.pathname.split(\"/\").filter(Boolean);\r\n  const mediaType = pathSegments[1];\r\n  const [data, setData] = useState(null);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n   const [genre, setGenre] = useState(null);\r\n    const [sortby, setSortby] = useState(null);\r\n  const genresUrl = `/genre/${mediaType}/list`;\r\n  const exploreUrl = `/discover/${mediaType}`;\r\n\r\n  const {\r\n    data: genresData,\r\n    loading: genresLoading,\r\n    error: genresError,\r\n  } = useFetch(genresUrl);\r\n  const {\r\n    data: exploreData,\r\n    loading: exploreLoading,\r\n    error: exploreError,\r\n  } = useFetch(exploreUrl);\r\n\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  const convertGenresToOptions = (genres) => {\r\n    return genres.map((genre) => ({\r\n      value: genre.id,\r\n      label: genre.name,\r\n    }));\r\n  };\r\n\r\n  const renderData = () =>\r\n    exploreData?.results?.map((item) => <Card data={item} />);\r\n  const renderSkeletons = () =>\r\n    Array.from({ length: 20 }).map((_, index) => (\r\n      <div\r\n        key={index}\r\n        className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n      >\r\n        <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <section\r\n      className={`${\r\n        exploreData ? \"h-full\" : \"h-screen\"\r\n      } bg-netflixbackground pt-28 w-screen  text-netflixWhite`}\r\n    >\r\n      <Container>\r\n        <div className=\"flex flex-wrap justify-between items-center page-heading\">\r\n          <div className=\"page-title\">\r\n            <h3 className=\"font-bold text-2xl\">\r\n              {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n            </h3>\r\n          </div>\r\n          <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n            <DropDown\r\n              options={\r\n                mediaType === \"tv\"\r\n                  ? convertGenresToOptions(TV_GENRES)\r\n                  : convertGenresToOptions(MOVIE_GENRES)\r\n              }\r\n              placeholder=\"Categories\"\r\n            />\r\n            <DropDown options={SORT_BY_DATA} placeholder=\"Sort By\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"items-start gap-4 space-y-2 grid grid-cols-4 pb-10 main-container\">\r\n          {exploreLoading || !exploreData || exploreData.length === 0\r\n            ? renderSkeletons()\r\n            : renderData()}\r\n        </div>\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Explore;\r\n*/\r\n","import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst TMDB_TOKEN =\"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjNmU5MzM1Yjg5Y2E3NWE3MGJjY2UxYzcyYmZkMDQ4ZCIsInN1YiI6IjYzYmVkN2FiODU4Njc4MDBmMDhjZjI3NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.sQHes_rn51wewxY_7nZLxGssnd67J8ieiLOIo2Bg_FI\"\r\n\r\nconst headers = {\r\n    Authorization: `Bearer ${TMDB_TOKEN}`,\r\n};\r\n\r\nexport const fetchDataFromApi = async (url, params) => {\r\n    try {\r\n        const { data } = await axios.get(`${BASE_URL}${url}`, {\r\n            headers,\r\n            params,\r\n        });\r\n        return data;\r\n    } catch (err) {\r\n        console.error('Error fetching data: ', err.response ? err.response.data : err.message);\r\n        throw err;\r\n    }\r\n};\r\n/*\r\nhttps://api.themoviedb.org/3/tv/popular\r\n\r\nhttps://api.themoviedb.org/3/movie/top_rated\r\nhttps://api.themoviedb.org/3/tv/popular\r\nhttps://api.themoviedb.org/3/discover/movie?sort_by=first_air_date.desc=&with_genres=16&with_original_language=ja\r\nhttps://api.themoviedb.org/3/discover/movie?sort_by=first_air_date.desc=&with_genres=16&with_original_language=ja\r\nhttps://api.themoviedb.org/3/movie/top_rated\r\nhttps://api.themoviedb.org/3/trending/movie/day\r\ntps://api.themoviedb.org/3/tv/top_rated\r\nhttps://api.themoviedb.org/3/discover/tv?sort_by=first_air_date.desc=&with_genres=16&with_original_language=ja\r\nhttps://api.themoviedb.org/3/movie/popular\r\nhttps://api.themoviedb.org/3/trending/movie/week\r\nhttps://api.themoviedb.org/3/discover/tv?sort_by=Default\r\nhttps://api.themoviedb.org/3/discover/movie?sort_by=first_air_date.desc=&with_genres=16&with_original_language=ja\r\nttps://api.themoviedb.org/3/discover/tv?sort_by=first_air_date.desc=&with_genres=16&with_original_language=ja\r\nhttps://api.themoviedb.org/3/discover/movie\r\nhttps://api.themoviedb.org/3/tv/95479/recommendations\r\nhttps://api.themoviedb.org/3/tv/13916/recommendations\r\n\r\nhttps://api.themoviedb.org/3/tv/1429/recommendations\r\n\r\nhttps://api.themoviedb.org/3/tv/63926/recommendations\r\n\r\nhttps://api.themoviedb.org/3/tv/95479/recommendations\r\nhttps://api.themoviedb.org/3/tv/61459/recommendations\r\nhttps://api.themoviedb.org/3/tv/88803/recommendations\r\nhttps://api.themoviedb.org/3/tv/1429/recommendations*/"],"names":["_ref","src","className","_jsx","LazyLoadImage","alt","effect","concat","_data$overview","_data$vote_average","_data$genre_ids","mediaTypes","data","navigate","useNavigate","useLocation","pathname","split","filter","Boolean","_jsxs","onClick","media_type","id","children","poster_path","LazyImg","title","name","overview","slice","dayjs","release_date","first_air_date","format","CircleRating","rating","vote_average","toFixed","Genres","genre_ids","type","text","width","CircularProgressbar","value","maxValue","styles","buildStyles","pathColor","textColor","textSize","genres","MOVIE_GENRES","TV_GENRES","map","g","genre","find","Array","from","length","_","index","SORT_BY_DATA","label","url","setData","useState","loading","setLoading","error","setError","fetchData","useCallback","async","result","fetchDataFromApi","useEffect","netflixColors","customStyles","container","provided","margin","fontFamily","control","state","backgroundColor","borderColor","isFocused","boxShadow","padding","color","fontWeight","cursor","valueContainer","singleValue","placeholder","dropdownIndicator","indicatorSeparator","menu","borderRadius","zIndex","menuList","option","isSelected","options","onChange","mediaType","Select","Explore","_data$results","_data$results2","pageNum","setPageNum","sortBy","setSortBy","selectedGenre","setSelectedGenre","key","setKey","genresData","useFetch","fetchInitialData","then","res","fetchGenreData","genreId","with_genres","sort_by","fetchNextPageData","params","page","prevData","results","prev","convertGenresToOptions","Container","DropDown","selectedOption","Loading","_Fragment","InfiniteScroll","dataLength","next","hasMore","total_pages","loader","item","Card","headers","Authorization","axios","get","err","console","response","message"],"sourceRoot":""}