{"version":3,"file":"static/js/850.ba83e469.chunk.js","mappings":"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","sources":["components/Loading.jsx","components/DropDown.jsx","pages/explore/Explore.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div className=\"items-center gap-4 space-y-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 pb-10 main-container\">\r\n      {Array.from({ length: 4 }).map((_, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n        >\r\n          <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useState } from 'react'\r\nimport Select from \"react-select\";\r\n\r\n\r\nconst netflixColors = {\r\n    red: '#E50914',\r\n    black: '#000000',\r\n    white: '#FFFFFF',\r\n    background: '#141414',\r\n    background2: '#1C1C1C',\r\n  };\r\n  \r\n  const customStyles = {\r\n    container: (provided) => ({\r\n      ...provided,\r\n      margin: \"10px 0\",\r\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n      \r\n    }),\r\n    control: (provided, state) => ({\r\n      ...provided,\r\n      width: \"300px\",\r\n      backgroundColor: netflixColors.background,\r\n      borderColor: state.isFocused ? netflixColors.black : netflixColors.red,\r\n      boxShadow: state.isFocused ? `0 0 0 1px ${netflixColors.red}` : \"none\",\r\n      \"&:hover\": {\r\n        borderColor: state.isFocused ? netflixColors.black : netflixColors.red,\r\n      },\r\n      padding: \"5px\",\r\n      color: netflixColors.white,\r\n      fontWeight: \"bold\", // Font weight bold\r\n    cursor: \"pointer\", // Cursor pointer\r\n      \r\n    }),\r\n    valueContainer: (provided) => ({\r\n      ...provided,\r\n      padding: \"0 6px\",\r\n      color: netflixColors.white,\r\n    }),\r\n    singleValue: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n    }),\r\n    placeholder: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n    }),\r\n    dropdownIndicator: (provided) => ({\r\n      ...provided,\r\n      color: netflixColors.white,\r\n      \"&:hover\": {\r\n        color: netflixColors.red,\r\n      },\r\n    }),\r\n    indicatorSeparator: (provided) => ({\r\n      ...provided,\r\n      backgroundColor: netflixColors.red,\r\n    }),\r\n    menu: (provided) => ({\r\n      ...provided,\r\n      backgroundColor: netflixColors.background2,\r\n      borderRadius: \"4px\",\r\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\r\n      zIndex: 10,\r\n    }),\r\n    menuList: (provided) => ({\r\n      ...provided,\r\n      padding: \"0\",\r\n      backgroundColor: netflixColors.background2,\r\n    }),\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      backgroundColor: state.isSelected\r\n        ? netflixColors.red\r\n        : state.isFocused\r\n        ? netflixColors.background\r\n        : netflixColors.background2,\r\n      color: state.isSelected ? netflixColors.white : netflixColors.white,\r\n      padding: \"10px 20px\",\r\n      \"&:active\": {\r\n        backgroundColor: netflixColors.red,\r\n        color: netflixColors.white,\r\n        cursor: \"pointer\",\r\n      },\r\n    }),\r\n  };\r\n  \r\nfunction DropDown({options,placeholder,onChange ,mediaType}) {\r\n\r\n  \r\n  return (\r\n    <Select \r\n    options={options} \r\n    styles={customStyles}\r\n    placeholder={placeholder}\r\n    onChange={onChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DropDown","// import React, { useEffect, useState } from \"react\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport Container from \"../../components/Container\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport DropDown from \"../../components/DropDown\";\r\nimport {\r\n  MOVIE_GENRES,\r\n  SORT_BY_DATA,\r\n  TV_GENRES,\r\n} from \"../../constants/api.constants\";\r\nimport useFetch from \"../../hooks/useFetchData\";\r\nimport Card from \"../../components/Card\";\r\nimport { fetchDataFromApi } from \"../../utils/api\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Loading from \"../../components/Loading\";\r\n\r\nconst Explore = () => {\r\n  const location = useLocation();\r\n  const mediaType = location.pathname.split(\"/\").filter(Boolean)[1];\r\n  \r\n  const [data, setData] = useState(null);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sortBy, setSortBy] = useState(SORT_BY_DATA[0].value);\r\n  const [selectedGenre, setSelectedGenre] = useState(null);\r\n  const [key, setKey] = useState(mediaType); // Use mediaType as key for DropDown\r\n\r\n  const { data: genresData } = useFetch(`/genre/${mediaType}/list`);\r\n\r\n  \r\n  const fetchInitialData = useCallback(() => {\r\n    setLoading(true);\r\n    fetchDataFromApi(`/discover/${mediaType}`).then(\r\n      (res) => {\r\n        setData(res);\r\n        // console.log(pageNum)\r\n        setPageNum(2);\r\n        setLoading(false);\r\n      }\r\n    );\r\n  }, [mediaType]);\r\n\r\n  const fetchGenreData = useCallback(\r\n    (genreId) => {\r\n      setLoading(true);\r\n      fetchDataFromApi(`/discover/${mediaType}`, {\r\n        with_genres: genreId,\r\n        sort_by: sortBy,\r\n      }).then((res) => {\r\n        // console.log(res)\r\n        setData(res);\r\n        setPageNum(2);\r\n        setLoading(false);\r\n      });\r\n    },\r\n\r\n    [sortBy,selectedGenre]\r\n  );\r\n\r\n  const fetchNextPageData = useCallback(() => {\r\n    const params = {\r\n      page: pageNum,\r\n      sort_by: sortBy,\r\n      with_genres: selectedGenre\r\n    };\r\n\r\n    fetchDataFromApi(`/discover/${mediaType}`, params).then((res) => {\r\n      setData((prevData) => ({\r\n        ...prevData,\r\n        results: [...(prevData?.results || []), ...res.results],\r\n      }));\r\n      setPageNum((prev) => prev + 1);\r\n    });\r\n  }, [pageNum]);\r\n\r\n    // Reset sortBy and selectedGenre when mediaType changes\r\n    useEffect(() => {\r\n      setSortBy(SORT_BY_DATA[0].value);\r\n      setSelectedGenre(null);\r\n      setPageNum(1);\r\n      setKey(mediaType); \r\n      fetchInitialData();\r\n    }, [mediaType]);\r\n\r\n    \r\n  useEffect(() => {\r\n    if (selectedGenre) {\r\n      fetchGenreData(selectedGenre);\r\n    }else if(sortBy){\r\n      fetchGenreData(selectedGenre);\r\n    } \r\n    else {\r\n      fetchInitialData();\r\n    }\r\n  }, [sortBy, selectedGenre]);\r\n\r\n  const convertGenresToOptions = (genres) =>\r\n    genres?.map((genre) => ({\r\n      value: genre.id,\r\n      label: genre.name,\r\n    })) || [];\r\n\r\n  const handleGenreChange = (selectedOption) => {\r\n    // console.log(selectedOption.value)\r\n    setSelectedGenre(selectedOption.value);\r\n  }\r\n  const handleSortChange = (selectedOption) =>{\r\n    // console.log(selectedOption.value)\r\n    setSortBy(selectedOption.value);}\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <div className=\"flex justify-center items-center my-2 w-full\">\r\n        <img\r\n          className=\"w-28\"\r\n          src=\"https://media3.giphy.com/media/FgH5xSNjGHZsiYPWAX/giphy.gif?cid=6c09b9523ta5vy9bxchut3l4buumvpzbmx5ht06hcn6s2rz9&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <section\r\n      className={`bg-netflixbackground pt-28 w-screen text-netflixWhite ${\r\n        data ? \"h-full\" : \"h-screen\"\r\n      }`}\r\n    >\r\n      <Container>\r\n        <div className=\"flex flex-wrap justify-between items-center mb-2 page-heading\">\r\n          <div className=\"page-title\">\r\n            <h3 className=\"font-bold text-2xl\">\r\n              {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n            </h3>\r\n          </div>\r\n          <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n            <DropDown\r\n            key={key}\r\n              options={\r\n                mediaType === \"tv\"\r\n                  ? convertGenresToOptions(TV_GENRES)\r\n                  : convertGenresToOptions(MOVIE_GENRES)\r\n              }\r\n              onChange={handleGenreChange}\r\n              placeholder=\"Categories\"\r\n              mediaType={mediaType}\r\n            />\r\n            <DropDown\r\n            key={mediaType}\r\n              options={SORT_BY_DATA}\r\n              placeholder=\"Sort By\"\r\n              onChange={handleSortChange}\r\n              mediaType={mediaType}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {loading && <Loading />}\r\n\r\n        {!loading && (\r\n          <>\r\n            {data?.results?.length > 0 ? (\r\n              <InfiniteScroll\r\n                className=\"content\"\r\n                dataLength={data?.results?.length}\r\n                next={fetchNextPageData}\r\n                hasMore={pageNum <= data?.total_pages}\r\n                loader={<Loading />}\r\n              >\r\n                <div className=\"items-start gap-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 pb-10 main-container\">\r\n                  {data.results.map(\r\n                    (item) =>\r\n                      item.media_type !== \"person\" && (\r\n                        <Card key={item.id} data={item} mediaTypes={mediaType} />\r\n                      )\r\n                  )}\r\n                </div>\r\n              </InfiniteScroll>\r\n            ) : (\r\n              <span className=\"resultNotFound\">Sorry, Results not found!</span>\r\n            )}\r\n          </>\r\n        )}\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Explore;\r\n\r\n// import Container from \"../../components/Container\";\r\n// import { useLocation, useParams } from \"react-router-dom\";\r\n// import DropDown from \"../../components/DropDown\";\r\n// import {\r\n//   MOVIE_GENRES,\r\n//   SORT_BY_DATA,\r\n//   TV_GENRES,\r\n// } from \"../../constants/api.constants\";\r\n// import useFetch from \"../../hooks/useFetchData\";\r\n// import Card from \"../../components/Card\";\r\n// import { fetchDataFromApi } from \"../../utils/api\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n// import Loading from \"../../components/Loading\";\r\n\r\n// function Explore() {\r\n//   const location = useLocation();\r\n//   const pathSegments = location.pathname.split(\"/\").filter(Boolean);\r\n//   const mediaType = pathSegments[1];\r\n//   const [data, setData] = useState(null);\r\n//   const [pageNum, setPageNum] = useState(1);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [genre, setGenre] = useState(null);\r\n//   const [sortby, setSortby] = useState(null);\r\n//   const genresUrl = `/genre/${mediaType}/list`;\r\n//   const exploreUrl = `/discover/${mediaType}`;\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortBy, setSortBy] = useState(SORT_BY_DATA[0].value);\r\n\r\n//   const { data: genresData } = useFetch(`/genre/${mediaType}/list`);\r\n//   const [selectedGenre, setSelectedGenre] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetchInitialData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedGenre) {\r\n//       fetchGenreData(selectedGenre.value);\r\n//     } else {\r\n//       fetchInitialData();\r\n//     }\r\n//     console.log(mediaType)\r\n//   }, [sortBy, selectedGenre,mediaType]);\r\n\r\n//   const fetchInitialData = () => {\r\n//     setLoading(true);\r\n//     fetchDataFromApi(`/discover/${mediaType}`, { sort_by: sortBy }).then((res) => {\r\n//       setData(res);\r\n//       setPageNum((prev) => prev + 1);\r\n//       setLoading(false);\r\n//     });\r\n//   };\r\n\r\n//   // const fetchNextPageData = () => {\r\n//   //   fetchDataFromApi(`/discover/${mediaType}?page=${pageNum}`, filters).then(\r\n//   //     (res) => {\r\n//   //       if (data?.results) {\r\n//   //         setData({\r\n//   //           ...data,\r\n//   //           results: [...data?.results, ...res.results],\r\n//   //         });\r\n//   //       } else {\r\n//   //         setData(res);\r\n//   //       }\r\n//   //       setPageNum((prev) => prev + 1);\r\n//   //     }\r\n//   //   );\r\n//   // };\r\n\r\n//   const fetchGenreData = (genreId) => {\r\n//     setLoading(true);\r\n//     fetchDataFromApi(`/discover/${mediaType}`, { with_genres: genreId, sort_by: sortBy }).then((res) => {\r\n//       setData(res);\r\n//       setPageNum(2); // Since we fetched page 1 already\r\n//       setLoading(false);\r\n//     });\r\n//   };\r\n\r\n//   const fetchNextPageData = () => {\r\n//     const params = selectedGenre\r\n//       ? { with_genres: selectedGenre.value, page: pageNum, sort_by: sortBy }\r\n//       : { page: pageNum, sort_by: sortBy };\r\n\r\n//     if (selectedGenre) {\r\n//       fetchDataFromApi(`/discover/${mediaType}`, params).then(\r\n//         (res) => {\r\n//           if (data?.results) {\r\n//             setData({\r\n//               ...data,\r\n//               results: [...data?.results, ...res.results],\r\n//             });\r\n//           } else {\r\n//             setData(res);\r\n//           }\r\n//           setPageNum((prev) => prev + 1);\r\n//         }\r\n//       );\r\n//     } else {\r\n//       fetchDataFromApi(`/discover/${mediaType}?page=${pageNum}`).then(\r\n//         (res) => {\r\n//           if (data?.results) {\r\n//             setData({\r\n//               ...data,\r\n//               results: [...data?.results, ...res.results],\r\n//             });\r\n//           } else {\r\n//             setData(res);\r\n//           }\r\n//           setPageNum((prev) => prev + 1);\r\n//         }\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   // useEffect(() => {\r\n//   //   filters = {};\r\n//   //   setData(null);\r\n//   //   setPageNum(1);\r\n//   //   setSortby(null);\r\n//   //   setGenre(null);\r\n//   //   fetchInitialData();\r\n//   // }, [mediaType]);\r\n\r\n//   const convertGenresToOptions = (genres) => {\r\n//     return genres.map((genre) => ({\r\n//       value: genre.id,\r\n//       label: genre.name,\r\n//     }));\r\n//   };\r\n//   const handleGenreChange = (selectedOption) => {\r\n//     setSelectedGenre(selectedOption);\r\n//   };\r\n\r\n//   const handleSortChange = (selectedOption) => {\r\n//     setSortBy(selectedOption.value);\r\n//   };\r\n//   const renderData = () => data?.results?.map((item) => <Card data={item} />);\r\n//   const renderSkeletons = () =>\r\n//     Array.from({ length: 20 }).map((_, index) => (\r\n//       <div\r\n//         key={index}\r\n//         className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n//       >\r\n//         <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n//       </div>\r\n//     ));\r\n\r\n//   return (\r\n//     <section\r\n//       className={`${\r\n//         data ? \"h-full\" : \"h-screen\"\r\n//       } bg-netflixbackground pt-28 w-screen  text-netflixWhite`}\r\n//     >\r\n//       <Container>\r\n//         <div className=\"flex flex-wrap justify-between items-center mb-2 page-heading\">\r\n//           <div className=\"page-title\">\r\n//             <h3 className=\"font-bold text-2xl\">\r\n//               {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n//             </h3>\r\n//           </div>\r\n//           <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n//             <DropDown\r\n//               options={\r\n//                 mediaType === \"tv\"\r\n//                   ? convertGenresToOptions(TV_GENRES)\r\n//                   : convertGenresToOptions(MOVIE_GENRES)\r\n//               }\r\n//               onChange={handleGenreChange}\r\n//               placeholder=\"Categories\"\r\n//             />\r\n//             <DropDown options={SORT_BY_DATA} placeholder=\"Sort By\" onChange={handleSortChange}/>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {loading && <Loading />}\r\n\r\n//         {!loading && (\r\n//           <>\r\n//             {data?.results?.length > 0 ? (\r\n//               <InfiniteScroll\r\n//                 className=\"content\"\r\n//                 dataLength={data?.results?.length || []}\r\n//                 next={fetchNextPageData}\r\n//                 hasMore={pageNum <= data?.total_pages}\r\n//                 loader={\r\n//                   <div className=\"flex justify-center items-center my-2 w-full\">\r\n//                     <img\r\n//                       className=\"w-28\"\r\n//                       src=\"https://media3.giphy.com/media/FgH5xSNjGHZsiYPWAX/giphy.gif?cid=6c09b9523ta5vy9bxchut3l4buumvpzbmx5ht06hcn6s2rz9&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s\"\r\n//                       alt=\"\"\r\n//                     />\r\n//                   </div>\r\n//                   // <Loading/>\r\n//                 }\r\n//               >\r\n//                 <div className=\"items-start gap-4 grid grid-cols-4 pb-10 main-container\">\r\n//                   {data?.results?.map((item, index) => {\r\n//                     if (item.media_type === \"person\") return;\r\n//                     return <Card key={item.id} data={item} />;\r\n//                   })}\r\n//                 </div>\r\n//               </InfiniteScroll>\r\n//             ) : (\r\n//               <span className=\"resultNotFound\">Sorry, Results not found!</span>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//         {/* {loading || !data || data.length === 0\r\n//             ? renderSkeletons()\r\n//             : renderData()} */}\r\n//       </Container>\r\n//     </section>\r\n//   );\r\n// }\r\n\r\n// export default Explore;\r\n// =============================================================================\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport Container from \"../../components/Container\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport DropDown from \"../../components/DropDown\";\r\nimport {\r\n  MOVIE_GENRES,\r\n  SORT_BY_DATA,\r\n  TV_GENRES,\r\n} from \"../../constants/api.constants\";\r\nimport useFetch from \"../../hooks/useFetchData\";\r\nimport Card from \"../../components/Card\";\r\n\r\nlet filters = {};\r\n\r\nfunction Explore() {\r\n  const location = useLocation();\r\n  const pathSegments = location.pathname.split(\"/\").filter(Boolean);\r\n  const mediaType = pathSegments[1];\r\n  const [data, setData] = useState(null);\r\n  const [pageNum, setPageNum] = useState(1);\r\n  const [loading, setLoading] = useState(false);\r\n   const [genre, setGenre] = useState(null);\r\n    const [sortby, setSortby] = useState(null);\r\n  const genresUrl = `/genre/${mediaType}/list`;\r\n  const exploreUrl = `/discover/${mediaType}`;\r\n\r\n  const {\r\n    data: genresData,\r\n    loading: genresLoading,\r\n    error: genresError,\r\n  } = useFetch(genresUrl);\r\n  const {\r\n    data: exploreData,\r\n    loading: exploreLoading,\r\n    error: exploreError,\r\n  } = useFetch(exploreUrl);\r\n\r\n  useEffect(() => {\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  const convertGenresToOptions = (genres) => {\r\n    return genres.map((genre) => ({\r\n      value: genre.id,\r\n      label: genre.name,\r\n    }));\r\n  };\r\n\r\n  const renderData = () =>\r\n    exploreData?.results?.map((item) => <Card data={item} />);\r\n  const renderSkeletons = () =>\r\n    Array.from({ length: 20 }).map((_, index) => (\r\n      <div\r\n        key={index}\r\n        className=\"relative border-1 w-full h-full cursor-pointer group\"\r\n      >\r\n        <div className=\"bg-gray-500 rounded-md w-full h-[400px] animate-pulse\"></div>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <section\r\n      className={`${\r\n        exploreData ? \"h-full\" : \"h-screen\"\r\n      } bg-netflixbackground pt-28 w-screen  text-netflixWhite`}\r\n    >\r\n      <Container>\r\n        <div className=\"flex flex-wrap justify-between items-center page-heading\">\r\n          <div className=\"page-title\">\r\n            <h3 className=\"font-bold text-2xl\">\r\n              {mediaType === \"tv\" ? \"Explore TV Shows\" : \"Explore Movies\"}\r\n            </h3>\r\n          </div>\r\n          <div className=\"flex flex-wrap justify-start md:justify-center items-center gap-1 sm:gap-2 page-filter\">\r\n            <DropDown\r\n              options={\r\n                mediaType === \"tv\"\r\n                  ? convertGenresToOptions(TV_GENRES)\r\n                  : convertGenresToOptions(MOVIE_GENRES)\r\n              }\r\n              placeholder=\"Categories\"\r\n            />\r\n            <DropDown options={SORT_BY_DATA} placeholder=\"Sort By\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"items-start gap-4 space-y-2 grid grid-cols-4 pb-10 main-container\">\r\n          {exploreLoading || !exploreData || exploreData.length === 0\r\n            ? renderSkeletons()\r\n            : renderData()}\r\n        </div>\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Explore;\r\n*/\r\n"],"names":["_jsx","className","children","Array","from","length","map","_","index","netflixColors","customStyles","container","provided","margin","fontFamily","control","state","width","backgroundColor","borderColor","isFocused","boxShadow","concat","padding","color","fontWeight","cursor","valueContainer","singleValue","placeholder","dropdownIndicator","indicatorSeparator","menu","borderRadius","zIndex","menuList","option","isSelected","_ref","options","onChange","mediaType","Select","styles","Explore","_data$results","_data$results2","useLocation","pathname","split","filter","Boolean","data","setData","useState","pageNum","setPageNum","loading","setLoading","sortBy","setSortBy","SORT_BY_DATA","value","selectedGenre","setSelectedGenre","key","setKey","genresData","useFetch","fetchInitialData","useCallback","fetchDataFromApi","then","res","fetchGenreData","genreId","with_genres","sort_by","fetchNextPageData","params","page","prevData","results","prev","useEffect","convertGenresToOptions","genres","genre","id","label","name","_jsxs","Container","DropDown","TV_GENRES","MOVIE_GENRES","selectedOption","Loading","_Fragment","InfiniteScroll","dataLength","next","hasMore","total_pages","loader","item","media_type","Card","mediaTypes"],"sourceRoot":""}